// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: streaming.proto

package servicios_streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicioStreamingClient is the client API for ServicioStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioStreamingClient interface {
	// RPC que recibe el ID de una canción y la devuelve como un stream
	// de fragmentos de audio. La palabra 'stream' indica que el servidor
	// enviará múltiples mensajes 'ChunkAudio' a través de una única conexión.
	StreamCancion(ctx context.Context, in *SolicitudStreamCancion, opts ...grpc.CallOption) (ServicioStreaming_StreamCancionClient, error)
}

type servicioStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioStreamingClient(cc grpc.ClientConnInterface) ServicioStreamingClient {
	return &servicioStreamingClient{cc}
}

func (c *servicioStreamingClient) StreamCancion(ctx context.Context, in *SolicitudStreamCancion, opts ...grpc.CallOption) (ServicioStreaming_StreamCancionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicioStreaming_ServiceDesc.Streams[0], "/streaming.ServicioStreaming/StreamCancion", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicioStreamingStreamCancionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServicioStreaming_StreamCancionClient interface {
	Recv() (*ChunkAudio, error)
	grpc.ClientStream
}

type servicioStreamingStreamCancionClient struct {
	grpc.ClientStream
}

func (x *servicioStreamingStreamCancionClient) Recv() (*ChunkAudio, error) {
	m := new(ChunkAudio)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicioStreamingServer is the server API for ServicioStreaming service.
// All implementations must embed UnimplementedServicioStreamingServer
// for forward compatibility
type ServicioStreamingServer interface {
	// RPC que recibe el ID de una canción y la devuelve como un stream
	// de fragmentos de audio. La palabra 'stream' indica que el servidor
	// enviará múltiples mensajes 'ChunkAudio' a través de una única conexión.
	StreamCancion(*SolicitudStreamCancion, ServicioStreaming_StreamCancionServer) error
	mustEmbedUnimplementedServicioStreamingServer()
}

// UnimplementedServicioStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedServicioStreamingServer struct {
}

func (UnimplementedServicioStreamingServer) StreamCancion(*SolicitudStreamCancion, ServicioStreaming_StreamCancionServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCancion not implemented")
}
func (UnimplementedServicioStreamingServer) mustEmbedUnimplementedServicioStreamingServer() {}

// UnsafeServicioStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioStreamingServer will
// result in compilation errors.
type UnsafeServicioStreamingServer interface {
	mustEmbedUnimplementedServicioStreamingServer()
}

func RegisterServicioStreamingServer(s grpc.ServiceRegistrar, srv ServicioStreamingServer) {
	s.RegisterService(&ServicioStreaming_ServiceDesc, srv)
}

func _ServicioStreaming_StreamCancion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SolicitudStreamCancion)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicioStreamingServer).StreamCancion(m, &servicioStreamingStreamCancionServer{stream})
}

type ServicioStreaming_StreamCancionServer interface {
	Send(*ChunkAudio) error
	grpc.ServerStream
}

type servicioStreamingStreamCancionServer struct {
	grpc.ServerStream
}

func (x *servicioStreamingStreamCancionServer) Send(m *ChunkAudio) error {
	return x.ServerStream.SendMsg(m)
}

// ServicioStreaming_ServiceDesc is the grpc.ServiceDesc for ServicioStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.ServicioStreaming",
	HandlerType: (*ServicioStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCancion",
			Handler:       _ServicioStreaming_StreamCancion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streaming.proto",
}
