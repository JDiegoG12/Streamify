// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: canciones.proto

package servicios_canciones

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicioCancionesClient is the client API for ServicioCanciones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioCancionesClient interface {
	// Obtiene la lista de todos los géneros musicales disponibles.
	ListarGeneros(ctx context.Context, in *SolicitudVacia, opts ...grpc.CallOption) (*RespuestaListaGeneros, error)
	// Obtiene la lista de canciones para un género específico.
	ListarCancionesPorGenero(ctx context.Context, in *SolicitudPorGenero, opts ...grpc.CallOption) (*RespuestaListaCanciones, error)
	// Obtiene los detalles completos de una canción específica.
	ObtenerDetallesCancion(ctx context.Context, in *SolicitudPorCancion, opts ...grpc.CallOption) (*CancionDTO, error)
}

type servicioCancionesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioCancionesClient(cc grpc.ClientConnInterface) ServicioCancionesClient {
	return &servicioCancionesClient{cc}
}

func (c *servicioCancionesClient) ListarGeneros(ctx context.Context, in *SolicitudVacia, opts ...grpc.CallOption) (*RespuestaListaGeneros, error) {
	out := new(RespuestaListaGeneros)
	err := c.cc.Invoke(ctx, "/canciones.ServicioCanciones/ListarGeneros", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioCancionesClient) ListarCancionesPorGenero(ctx context.Context, in *SolicitudPorGenero, opts ...grpc.CallOption) (*RespuestaListaCanciones, error) {
	out := new(RespuestaListaCanciones)
	err := c.cc.Invoke(ctx, "/canciones.ServicioCanciones/ListarCancionesPorGenero", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioCancionesClient) ObtenerDetallesCancion(ctx context.Context, in *SolicitudPorCancion, opts ...grpc.CallOption) (*CancionDTO, error) {
	out := new(CancionDTO)
	err := c.cc.Invoke(ctx, "/canciones.ServicioCanciones/ObtenerDetallesCancion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioCancionesServer is the server API for ServicioCanciones service.
// All implementations must embed UnimplementedServicioCancionesServer
// for forward compatibility
type ServicioCancionesServer interface {
	// Obtiene la lista de todos los géneros musicales disponibles.
	ListarGeneros(context.Context, *SolicitudVacia) (*RespuestaListaGeneros, error)
	// Obtiene la lista de canciones para un género específico.
	ListarCancionesPorGenero(context.Context, *SolicitudPorGenero) (*RespuestaListaCanciones, error)
	// Obtiene los detalles completos de una canción específica.
	ObtenerDetallesCancion(context.Context, *SolicitudPorCancion) (*CancionDTO, error)
	mustEmbedUnimplementedServicioCancionesServer()
}

// UnimplementedServicioCancionesServer must be embedded to have forward compatible implementations.
type UnimplementedServicioCancionesServer struct {
}

func (UnimplementedServicioCancionesServer) ListarGeneros(context.Context, *SolicitudVacia) (*RespuestaListaGeneros, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarGeneros not implemented")
}
func (UnimplementedServicioCancionesServer) ListarCancionesPorGenero(context.Context, *SolicitudPorGenero) (*RespuestaListaCanciones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarCancionesPorGenero not implemented")
}
func (UnimplementedServicioCancionesServer) ObtenerDetallesCancion(context.Context, *SolicitudPorCancion) (*CancionDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerDetallesCancion not implemented")
}
func (UnimplementedServicioCancionesServer) mustEmbedUnimplementedServicioCancionesServer() {}

// UnsafeServicioCancionesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioCancionesServer will
// result in compilation errors.
type UnsafeServicioCancionesServer interface {
	mustEmbedUnimplementedServicioCancionesServer()
}

func RegisterServicioCancionesServer(s grpc.ServiceRegistrar, srv ServicioCancionesServer) {
	s.RegisterService(&ServicioCanciones_ServiceDesc, srv)
}

func _ServicioCanciones_ListarGeneros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudVacia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioCancionesServer).ListarGeneros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canciones.ServicioCanciones/ListarGeneros",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioCancionesServer).ListarGeneros(ctx, req.(*SolicitudVacia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicioCanciones_ListarCancionesPorGenero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudPorGenero)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioCancionesServer).ListarCancionesPorGenero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canciones.ServicioCanciones/ListarCancionesPorGenero",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioCancionesServer).ListarCancionesPorGenero(ctx, req.(*SolicitudPorGenero))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicioCanciones_ObtenerDetallesCancion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudPorCancion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioCancionesServer).ObtenerDetallesCancion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canciones.ServicioCanciones/ObtenerDetallesCancion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioCancionesServer).ObtenerDetallesCancion(ctx, req.(*SolicitudPorCancion))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicioCanciones_ServiceDesc is the grpc.ServiceDesc for ServicioCanciones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioCanciones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canciones.ServicioCanciones",
	HandlerType: (*ServicioCancionesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListarGeneros",
			Handler:    _ServicioCanciones_ListarGeneros_Handler,
		},
		{
			MethodName: "ListarCancionesPorGenero",
			Handler:    _ServicioCanciones_ListarCancionesPorGenero_Handler,
		},
		{
			MethodName: "ObtenerDetallesCancion",
			Handler:    _ServicioCanciones_ObtenerDetallesCancion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canciones.proto",
}
